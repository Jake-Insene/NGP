.DATA

MAIN_OPCODE:
	dq CALL_OPC
    dq BRANCH_OPC
    dq SWI_OPC
    dq RET_OPC
    dq HALT_OPC
    dq BRANCH_COND_OPC
    dq BINARY_OPC
    dq FBINARY_OPC
    dq MEMORY_IMMEDIATE_OPC
    dq FMEMORY_IMMEDIATE_OPC
    dq MEMORY_PAIR_OPC
    dq LD_PC_OPC
    dq LD_S_PC_OPC
    dq LD_D_PC_OPC
    dq LD_Q_PC_OPC
    dq ADR_PC_OPC
    dq IMMEDIATE_OPC
    dq ADD_IMMEDIATE_OPC
    dq ADDS_IMMEDIATE_OPC
    dq SUB_IMMEDIATE_OPC
    dq SUBS_IMMEDIATE_OPC
    dq RSB_IMMEDIATE_OPC
    dq AND_IMMEDIATE_OPC
    dq ANDS_IMMEDIATE_OPC
    dq OR_IMMEDIATE_OPC
    dq ORN_IMMEDIATE_OPC
    dq EOR_IMMEDIATE_OPC
    dq TEST_AND_BRANCH_OPC
    dq COMPARE_AND_BRANCH_OPC

BRANCH_CONDITIONAL_OPCODE:
    dq BEQ_OPC
    dq BNE_OPC
    dq BLT_OPC
    dq BLE_OPC
    dq BGT_OPC
    dq BGE_OPC
    dq BCS_OPC
    dq BNC_OPC
    dq BSS_OPC
    dq BNS_OPC
    dq BOS_OPC
    dq BNO_OPC
    dq BHI_OPC
    dq BLS_OPC

BINARY_OPCODE:
    dq ADC_OPC
    dq SBC_OPC
    dq ADD_SHL_OPC
    dq ADD_SHR_OPC
    dq ADD_ASR_OPC
    dq SUB_SHL_OPC
    dq SUB_SHR_OPC
    dq SUB_ASR_OPC
    dq MUL_OPC
    dq UMUL_OPC
    dq DIV_OPC
    dq UDIV_OPC
    dq RSB_SHL_OPC
    dq RSB_SHR_OPC
    dq RSB_ASR_OPC
    dq MVN_SHL_OPC
    dq MVN_SHR_OPC
    dq MVN_ASR_OPC
    dq MVN_ROR_OPC
    dq AND_SHL_OPC
    dq AND_SHR_OPC
    dq AND_ASR_OPC
    dq OR_SHL_OPC
    dq OR_SHR_OPC
    dq OR_ASR_OPC
    dq ORN_SHL_OPC
    dq ORN_SHR_OPC
    dq ORN_ASR_OPC
    dq EOR_SHL_OPC
    dq EOR_SHR_OPC
    dq EOR_ASR_OPC
    dq SHL_OPC
    dq SHR_OPC
    dq ASR_OPC
    dq ROR_OPC
    dq ADDS_SHL_OPC
    dq ADDS_SHR_OPC
    dq ADDS_ASR_OPC
    dq SUBS_SHL_OPC
    dq SUBS_SHR_OPC
    dq SUBS_ASR_OPC
    dq ANDS_SHL_OPC
    dq ANDS_SHR_OPC
    dq ANDS_ASR_OPC
    dq MADD_OPC
    dq MSUB_OPC
    dq UMADD_OPC
    dq UMSUB_OPC
    dq SHL_IMMEDIATE_OPC
    dq SHR_IMMEDIATE_OPC
    dq ASR_IMMEDIATE_OPC
    dq ROR_IMMEDIATE_OPC
    dq CMP_SHL_OPC
    dq CMP_SHR_OPC
    dq CMP_ASR_OPC
    dq CMN_SHL_OPC
    dq CMN_SHR_OPC
    dq CMN_ASR_OPC
    dq TST_SHL_OPC
    dq TST_SHR_OPC
    dq TST_ASR_OPC
    dq LD_OPC
    dq LDSH_OPC
    dq LDH_OPC
    dq LDSB_OPC
    dq LDB_OPC
    dq ST_OPC
    dq STH_OPC
    dq STB_OPC
    dq ABS_OPC

FBINARY_OPCODE:
    dq FMOV_S_OPC
    dq FMOV_D_OPC
    dq FMOV_NC_W_S_OPC
    dq FMOV_NC_S_W_OPC
    dq FMOV_NC_W_D_OPC
    dq FMOV_NC_D_W_OPC
    dq FCVTZS_S_OPC
    dq FCVTZU_S_OPC
    dq FCVTZS_D_OPC
    dq FCVTZU_D_OPC
    dq SCVTF_S_OPC
    dq UCVTF_S_OPC
    dq SCVTF_D_OPC
    dq UCVTF_D_OPC
    dq FADD_S_OPC
    dq FSUB_S_OPC
    dq FMUL_S_OPC
    dq FDIV_S_OPC
    dq FADD_D_OPC
    dq FSUB_D_OPC
    dq FMUL_D_OPC
    dq FDIV_D_OPC
    dq LD_S_OPC
    dq ST_S_OPC
    dq LD_D_OPC
    dq ST_D_OPC
    dq FNEG_S_OPC
    dq FNEG_D_OPC
    dq FABS_S_OPC
    dq FABS_D_OPC

MEMORY_IMMEDIATE_OPCODE:
    dq LD_IMMEDIATE_OPC
    dq LDSH_IMMEDIATE_OPC
    dq LDH_IMMEDIATE_OPC
    dq LDSB_IMMEDIATE_OPC
    dq LDB_IMMEDIATE_OPC
    dq ST_IMMEDIATE_OPC
    dq STH_IMMEDIATE_OPC
    dq STB_IMMEDIATE_OPC

FMEMORY_IMMEDIATE_OPCODE:
    dq LD_S_IMMEDIATE_OPC
    dq LD_D_IMMEDIATE_OPC
    dq LD_Q_IMMEDIATE_OPC
    dq ST_S_IMMEDIATE_OPC
    dq ST_D_IMMEDIATE_OPC
    dq ST_Q_IMMEDIATE_OPC

MEMORY_PAIR_OPCODE:
    dq LDP_OPC
    dq LDP_S_OPC
    dq LDP_D_OPC
    dq LDP_Q_OPC
    dq STP_OPC
    dq STP_S_OPC
    dq STP_D_OPC
    dq STP_Q_OPC

IMMEDIATE_OPCODE:
    dq MOV_IMMEDIATE_OPC
    dq MOVT_IMMEDIATE_OPC
    dq MVN_IMMEDIATE_OPC
    dq MVNT_IMMEDIATE_OPC
    dq CMP_IMMEDIATE_OPC
    dq CMN_IMMEDIATE_OPC
    dq TST_IMMEDIATE_OPC
    dq FMOV_S_IMMEDIATE_OPC
    dq FMOV_D_IMMEDIATE_OPC

TEST_BRANCH_OPCODE:
    dq TBZ_OPC
    dq TBNZ_OPC

COMPARE_BRANCH_OPCODE:
    dq CBZ_OPC
    dq CBNZ_OPC

; --------------------------------------------
;               MAIN INSTRUCTIONS
; --------------------------------------------

.CODE
INCLUDE MacrosWIN64.inc
INCLUDE BinaryWIN64.inc
INCLUDE BranchConditionalWIN64.inc
INCLUDE FBinaryWIN64.inc
INCLUDE ImmediateWIN64.inc
INCLUDE MemoryWIN64.inc
INCLUDE UtilityWIN64.inc

EXTERN compare : PROC
EXTERN compare_add : PROC
EXTERN compare_and : PROC
EXTERN get_real_address : PROC
EXTERN get_flags : PROC

CALL_OPC:
    MOV R10, RCX
    SHR R10, 6

    SIGN_EXTEND R11, R10, 26
    SAL R11, 2
    
    MOV R10D, DWORD PTR[R8]
    SUB DWORD PTR[RDX+31*4], 4
    
    MOV ECX, DWORD PTR[RDX+31*4]
    CALL get_real_address

    RESTORE_ARGS
    
    MOV DWORD PTR[RAX], R10D
    ADD DWORD PTR[R8], R11D

	JMP CONTINUE_ADDRESS
BRANCH_OPC:
    MOV R10, RCX
    SHR R10, 6

    SIGN_EXTEND R11, R10, 26
    SAL R11, 2
    
    ADD DWORD PTR[R8], R11D

    JMP CONTINUE_ADDRESS
SWI_OPC:
    JMP CONTINUE_ADDRESS
RET_OPC:
    MOV ECX, DWORD PTR[RDX+31*4]
    CALL get_real_address

    RESTORE_ARGS

    MOV R10D, DWORD PTR[RAX]
    ADD DWORD PTR[RDX+31*4], 4
    MOV DWORD PTR[R8], R10D    

    JMP CONTINUE_ADDRESS
HALT_OPC:
    MOV BYTE PTR[R9], 1
    JMP CONTINUE_ADDRESS
BRANCH_COND_OPC:
    ; Cond
    MOV R12, RCX
    SHR R12, 6h
    AND R12, 15

    ; Disp
    MOV R11, RCX
    SHR R11, 10

	SIGN_EXTEND R10D, R11D, 22
	SAL R10, 2

    CALL get_flags
    RESTORE_ARGS

    MOV R11, RAX

    LEA RAX, BRANCH_CONDITIONAL_OPCODE
    MOV RBX, QWORD PTR[RAX+R12*8]
    JMP RBX

    JMP CONTINUE_ADDRESS
BINARY_OPC:
    ; Dest register
    MOV R10, RCX
    SHR R10, 6h
    AND R10, 1Fh

    ; First 1 opcode
    MOV R11, RCX
    SHR R11, 11
    AND R11, 1Fh

    ; Second 2 opcode
    MOV R12, RCX
    SHR R12, 16
    AND R12, 1Fh

    ; Third 3 opcode
    MOV R13, RCX
    SHR R13, 21
    AND R13, 1Fh

    ; Binary opcode
    MOV R14, RCX
    SHR R14, 26

    LEA RAX, BINARY_OPCODE
	MOV RBX, QWORD PTR [RAX+R14*8]
	JMP RBX

    JMP CONTINUE_ADDRESS
FBINARY_OPC:
    JMP CONTINUE_ADDRESS
MEMORY_IMMEDIATE_OPC:
    ; Dest register
    MOV R10, RCX
    SHR R10, 6
    AND R10, 1Fh
    
    ; Base register
    MOV R11, RCX
    SHR R11, 11
    AND R11, 1Fh

    ; Memory opcode
    MOV R12, RCX
    SHR R12, 16
    AND R12, 7h
    
    ; Disp
    MOV R13, RCX
    SHR R13, 19
    AND R13, 1h

    MOV R14, RCX
    SHR R14, 20
    
    TEST R13, R13
    JZ SKI_SUB
    NEG R14
SKI_SUB:

    LEA RAX, MEMORY_IMMEDIATE_OPCODE
	MOV RBX, QWORD PTR [RAX+R12*8]
	JMP RBX

    JMP CONTINUE_ADDRESS
FMEMORY_IMMEDIATE_OPC:
    JMP CONTINUE_ADDRESS
MEMORY_PAIR_OPC:
    JMP CONTINUE_ADDRESS
LD_PC_OPC:
    JMP CONTINUE_ADDRESS
LD_S_PC_OPC:
    JMP CONTINUE_ADDRESS
LD_D_PC_OPC:
    JMP CONTINUE_ADDRESS
LD_Q_PC_OPC:
    JMP CONTINUE_ADDRESS
ADR_PC_OPC:
    ; Dest register
    MOV R10, RCX
    SHL R10, 6
    AND R10, 1Fh

    ; Disp21
    MOV R11, RCX
    SHR R11, 11

    SIGN_EXTEND R12D, R11D, 21
    SAL R12D, 2

    MOV R13D, DWORD PTR[R8]
    ADD R13D, R12D
    MOV DWORD PTR[RDX+R10*4], R13D

    JMP CONTINUE_ADDRESS
IMMEDIATE_OPC:
    ; Dest register
    MOV R10, RCX
    SHR R10, 6h
    AND R10, 1Fh

    ; Immediate opcode
    MOV R11, RCX
    SHR R11, 11
    AND R11, 1Fh

    ; Immediate value
    MOV R12, RCX
    SHR R12, 10h

    LEA RAX, IMMEDIATE_OPCODE
	MOV RBX, QWORD PTR [RAX+R11*8]
	JMP RBX

    JMP CONTINUE_ADDRESS
ADD_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE
    
    MOV R13D, DWORD PTR[RDX+R11*4]
    ADD R13, R12
    MOV DWORD PTR [RDX+R10*4], R13D

    JMP CONTINUE_ADDRESS
ADDS_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV ECX, DWORD PTR[RDX+R11*4]
    MOV RDX, R12
    CALL compare_add

    RESTORE_ARGS

    MOV DWORD PTR [RDX+R10*4], EAX

    JMP CONTINUE_ADDRESS
SUB_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV R13D, DWORD PTR[RDX+R11*4]
    SUB R13, R12
    MOV DWORD PTR [RDX+R10*4], R13D

    JMP CONTINUE_ADDRESS
SUBS_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV ECX, DWORD PTR[RDX+R11*4]
    MOV RDX, R12
    CALL compare

    RESTORE_ARGS

    MOV DWORD PTR [RDX+R10*4], EAX

    JMP CONTINUE_ADDRESS
RSB_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV R11D, DWORD PTR[RDX+R11*4]
    NOT R11D
    ADD R11D, R12D
    ADD R11D, 1

    MOV DWORD PTR[RDX+R10*4], R11D

    JMP CONTINUE_ADDRESS
AND_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV R13D, DWORD PTR[RDX+R11*4]
    AND R13, R12
    MOV DWORD PTR [RDX+R10*4], R13D

    JMP CONTINUE_ADDRESS
ANDS_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV ECX, DWORD PTR[RDX+R11*4]
    MOV RDX, R12
    CALL compare_and

    RESTORE_ARGS

    MOV DWORD PTR [RDX+R10*4], EAX

    JMP CONTINUE_ADDRESS
OR_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV R13D, DWORD PTR[RDX+R11*4]
    OR R13, R12
    MOV DWORD PTR [RDX+R10*4], R13D
    
    JMP CONTINUE_ADDRESS
ORN_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV R13D, DWORD PTR[RDX+R11*4]
    NOT R12
    OR R13, R12
    MOV DWORD PTR [RDX+R10*4], R13D

    JMP CONTINUE_ADDRESS
EOR_IMMEDIATE_OPC:
    IMMEDIATE_16_PROLOGUE

    MOV R13D, DWORD PTR[RDX+R11*4]
    XOR R13, R12
    MOV DWORD PTR [RDX+R10*4], R13D

    JMP CONTINUE_ADDRESS
TEST_AND_BRANCH_OPC:
    JMP CONTINUE_ADDRESS
COMPARE_AND_BRANCH_OPC:
    JMP CONTINUE_ADDRESS

; --------------------------------------------
;               MAIN INTERPRETER
; --------------------------------------------

; RCX = Instruction
; RDX = Register List
; R8 = PC Pointer
InterpreterMain PROC
    MOV QWORD PTR[RSP+8], RCX
    MOV QWORD PTR[RSP+16], RDX
    MOV QWORD PTR[RSP+24], R8
    MOV QWORD PTR[RSP+32], R9

    SUB RSP, 30h

	; Interpreter zone
	MOV RBX, RCX
	AND RBX, 3Fh

	LEA RAX, MAIN_OPCODE
	MOV RBX, QWORD PTR [RAX+RBX*8]
	JMP RBX
CONTINUE:
CONTINUE_ADDRESS EQU $

    ADD RSP, 30h
	RET
InterpreterMain ENDP

END
